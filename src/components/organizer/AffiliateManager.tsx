import React, { useState } from 'react';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { 
  Plus, 
  Copy, 
  ExternalLink, 
  TrendingUp, 
  Users, 
  DollarSign, 
  MousePointer,
  BarChart3,
  Eye,
  EyeOff
} from 'lucide-react';
import { useAuth } from '@/contexts/EnhancedAuthContext';
import { useToast } from '@/hooks/use-toast';

interface AffiliateLink {
  id: string;
  event_id: string;
  promoter_name: string;
  promoter_email?: string;
  affiliate_code: string;
  commission_rate: number;
  is_active: boolean;
  created_at: string;
  notes?: string;
}

interface AffiliateStats {
  total_clicks: number;
  total_conversions: number;
  total_revenue: number;
  total_commission: number;
  conversion_rate: number;
  avg_order_value: number;
}

interface AffiliateManagerProps {
  eventId: string;
  eventTitle: string;
}

export const AffiliateManager: React.FC<AffiliateManagerProps> = ({ eventId, eventTitle }) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [newAffiliate, setNewAffiliate] = useState({
    promoter_name: '',
    promoter_email: '',
    commission_rate: 10,
    notes: ''
  });

  // Fetch affiliate links
  const { data: affiliateLinks, isLoading } = useQuery({
    queryKey: ['affiliate-links', eventId],
    queryFn: async () => {
      const { data, error } = await supabase
        .from('affiliate_links')
        .select('*')
        .eq('event_id', eventId)
        .order('created_at', { ascending: false });

      if (error) throw error;
      return data as AffiliateLink[];
    },
    enabled: !!eventId && !!user,
  });

  // Fetch affiliate stats for each link
  const { data: affiliateStats } = useQuery({
    queryKey: ['affiliate-stats', eventId],
    queryFn: async () => {
      if (!affiliateLinks) return {};
      
      const statsPromises = affiliateLinks.map(async (link) => {
        const { data, error } = await supabase
          .rpc('get_affiliate_stats', { p_affiliate_link_id: link.id });
        
        if (error) throw error;
        return { [link.id]: data[0] as AffiliateStats };
      });

      const results = await Promise.all(statsPromises);
      return results.reduce((acc, stat) => ({ ...acc, ...stat }), {});
    },
    enabled: !!affiliateLinks && affiliateLinks.length > 0,
  });

  // Create affiliate link mutation
  const createAffiliateMutation = useMutation({
    mutationFn: async (affiliateData: typeof newAffiliate) => {
      if (!user) throw new Error('User not authenticated');

      const { error } = await supabase
        .from('affiliate_links')
        .insert({
          event_id: eventId,
          organizer_id: user.id,
          ...affiliateData,
          affiliate_code: '' // Will be generated by the database
        });

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['affiliate-links'] });
      setIsCreateDialogOpen(false);
      setNewAffiliate({
        promoter_name: '',
        promoter_email: '',
        commission_rate: 10,
        notes: ''
      });
      toast({
        title: 'Affiliate Link Created',
        description: 'New affiliate link has been created successfully.',
      });
    },
    onError: (error) => {
      toast({
        title: 'Creation Failed',
        description: `Failed to create affiliate link: ${error.message}`,
        variant: 'destructive',
      });
    },
  });

  // Toggle affiliate link status
  const toggleAffiliateMutation = useMutation({
    mutationFn: async ({ linkId, isActive }: { linkId: string; isActive: boolean }) => {
      const { error } = await supabase
        .from('affiliate_links')
        .update({ is_active: !isActive })
        .eq('id', linkId);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['affiliate-links'] });
      toast({
        title: 'Status Updated',
        description: 'Affiliate link status has been updated.',
      });
    },
  });

  const generateAffiliateUrl = (affiliateCode: string) => {
    const baseUrl = window.location.origin;
    return `${baseUrl}/events/${eventId}?ref=${affiliateCode}`;
  };

  const copyAffiliateUrl = (affiliateCode: string) => {
    const url = generateAffiliateUrl(affiliateCode);
    navigator.clipboard.writeText(url);
    toast({
      title: 'Link Copied',
      description: 'Affiliate link has been copied to clipboard.',
    });
  };

  const totalStats = affiliateStats ? Object.values(affiliateStats).reduce(
    (acc: AffiliateStats, stats: AffiliateStats) => ({
      total_clicks: acc.total_clicks + stats.total_clicks,
      total_conversions: acc.total_conversions + stats.total_conversions,
      total_revenue: acc.total_revenue + stats.total_revenue,
      total_commission: acc.total_commission + stats.total_commission,
      conversion_rate: 0, // Will calculate separately
      avg_order_value: 0, // Will calculate separately
    }),
    {
      total_clicks: 0,
      total_conversions: 0,
      total_revenue: 0,
      total_commission: 0,
      conversion_rate: 0,
      avg_order_value: 0,
    }
  ) : null;

  if (totalStats) {
    totalStats.conversion_rate = totalStats.total_clicks > 0 
      ? (totalStats.total_conversions / totalStats.total_clicks) * 100 
      : 0;
    totalStats.avg_order_value = totalStats.total_conversions > 0 
      ? totalStats.total_revenue / totalStats.total_conversions 
      : 0;
  }

  if (isLoading) {
    return (
      <Card>
        <CardContent className="pt-6">
          <div className="space-y-4">
            {[1, 2, 3].map((i) => (
              <div key={i} className="h-16 bg-muted animate-pulse rounded" />
            ))}
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Overview Stats */}
      {totalStats && (
        <div className="grid grid-cols-2 lg:grid-cols-5 gap-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-2">
                <MousePointer className="h-4 w-4 text-blue-600" />
                <span className="text-sm font-medium">Clicks</span>
              </div>
              <p className="text-2xl font-bold">{totalStats.total_clicks}</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-2">
                <TrendingUp className="h-4 w-4 text-green-600" />
                <span className="text-sm font-medium">Conversions</span>
              </div>
              <p className="text-2xl font-bold">{totalStats.total_conversions}</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-2">
                <DollarSign className="h-4 w-4 text-emerald-600" />
                <span className="text-sm font-medium">Revenue</span>
              </div>
              <p className="text-2xl font-bold">R{totalStats.total_revenue.toFixed(2)}</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-2">
                <BarChart3 className="h-4 w-4 text-purple-600" />
                <span className="text-sm font-medium">Conversion Rate</span>
              </div>
              <p className="text-2xl font-bold">{totalStats.conversion_rate.toFixed(1)}%</p>
            </CardContent>
          </Card>
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-2">
                <Users className="h-4 w-4 text-orange-600" />
                <span className="text-sm font-medium">Avg Order</span>
              </div>
              <p className="text-2xl font-bold">R{totalStats.avg_order_value.toFixed(2)}</p>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold">Affiliate Links</h2>
          <p className="text-muted-foreground">
            Manage promoter affiliate links for {eventTitle}
          </p>
        </div>
        <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              Create Affiliate Link
            </Button>
          </DialogTrigger>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>Create New Affiliate Link</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label htmlFor="promoter-name">Promoter Name</Label>
                <Input
                  id="promoter-name"
                  value={newAffiliate.promoter_name}
                  onChange={(e) => setNewAffiliate({ ...newAffiliate, promoter_name: e.target.value })}
                  placeholder="John Doe"
                />
              </div>
              <div>
                <Label htmlFor="promoter-email">Email (Optional)</Label>
                <Input
                  id="promoter-email"
                  type="email"
                  value={newAffiliate.promoter_email}
                  onChange={(e) => setNewAffiliate({ ...newAffiliate, promoter_email: e.target.value })}
                  placeholder="john@example.com"
                />
              </div>
              <div>
                <Label htmlFor="commission-rate">Commission Rate (%)</Label>
                <Input
                  id="commission-rate"
                  type="number"
                  min="0"
                  max="100"
                  step="0.1"
                  value={newAffiliate.commission_rate}
                  onChange={(e) => setNewAffiliate({ ...newAffiliate, commission_rate: parseFloat(e.target.value) || 0 })}
                />
              </div>
              <div>
                <Label htmlFor="notes">Notes (Optional)</Label>
                <Textarea
                  id="notes"
                  value={newAffiliate.notes}
                  onChange={(e) => setNewAffiliate({ ...newAffiliate, notes: e.target.value })}
                  placeholder="Additional information about this promoter..."
                />
              </div>
              <Button 
                onClick={() => createAffiliateMutation.mutate(newAffiliate)}
                disabled={createAffiliateMutation.isPending || !newAffiliate.promoter_name}
                className="w-full"
              >
                Create Affiliate Link
              </Button>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Affiliate Links Table */}
      {affiliateLinks && affiliateLinks.length > 0 ? (
        <Card>
          <CardHeader>
            <CardTitle>Active Affiliate Links</CardTitle>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Promoter</TableHead>
                  <TableHead>Code</TableHead>
                  <TableHead>Commission</TableHead>
                  <TableHead>Clicks</TableHead>
                  <TableHead>Conversions</TableHead>
                  <TableHead>Revenue</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {affiliateLinks.map((link) => {
                  const stats = affiliateStats?.[link.id];
                  return (
                    <TableRow key={link.id}>
                      <TableCell>
                        <div>
                          <p className="font-medium">{link.promoter_name}</p>
                          {link.promoter_email && (
                            <p className="text-sm text-muted-foreground">{link.promoter_email}</p>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <code className="px-2 py-1 bg-muted rounded text-sm">
                            {link.affiliate_code}
                          </code>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => copyAffiliateUrl(link.affiliate_code)}
                          >
                            <Copy className="h-3 w-3" />
                          </Button>
                        </div>
                      </TableCell>
                      <TableCell>{link.commission_rate}%</TableCell>
                      <TableCell>{stats?.total_clicks || 0}</TableCell>
                      <TableCell>{stats?.total_conversions || 0}</TableCell>
                      <TableCell>R{stats?.total_revenue?.toFixed(2) || '0.00'}</TableCell>
                      <TableCell>
                        <Badge variant={link.is_active ? "default" : "secondary"}>
                          {link.is_active ? 'Active' : 'Inactive'}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => window.open(generateAffiliateUrl(link.affiliate_code), '_blank')}
                          >
                            <ExternalLink className="h-3 w-3" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => toggleAffiliateMutation.mutate({ 
                              linkId: link.id, 
                              isActive: link.is_active 
                            })}
                          >
                            {link.is_active ? <EyeOff className="h-3 w-3" /> : <Eye className="h-3 w-3" />}
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  );
                })}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardContent className="pt-6 text-center">
            <Users className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Affiliate Links Yet</h3>
            <p className="text-muted-foreground mb-4">
              Create affiliate links to track promoter performance and drive more ticket sales.
            </p>
            <Button onClick={() => setIsCreateDialogOpen(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Create First Affiliate Link
            </Button>
          </CardContent>
        </Card>
      )}
    </div>
  );
};